import pytest
from pages.note_page import NotePage

@pytest.mark.ui
def test_add_note(page):
    """–¢–µ—Å—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"""
    print("\nüîÑ –ó–∞–ø—É—Å–∫ test_add_note")
    note_page = NotePage(page)
    note_page.open()
    note_page.add_note("Test note", "This is a test note.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –∑–∞–º–µ—Ç–∫–∞
    notes_list = note_page.get_notes()
    assert any("Test note" in note for note in notes_list), "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!"

@pytest.mark.ui
def test_delete_note(page):
    """–¢–µ—Å—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
    print("\nüîÑ –ó–∞–ø—É—Å–∫ test_delete_note")
    note_page = NotePage(page)
    note_page.open()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –µ—ë
    notes_list = note_page.get_notes()
    if "Note to delete" in notes_list:
        print("‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ 'Note to delete' —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ.")
    else:
        note_page.add_note("Note to delete", "This note will be deleted.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
    notes_list = note_page.get_notes()
    assert any("Note to delete" in note for note in notes_list), "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º!"

    # –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
    assert note_page.delete_note("Note to delete"), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É!"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –∏—Å—á–µ–∑–ª–∞
    notes_list_after = note_page.get_notes()
    assert not any("Note to delete" in note for note in notes_list_after), "‚ùå –ó–∞–º–µ—Ç–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è!"


@pytest.mark.ui
def test_download_note(page):
    """–¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–º–µ—Ç–∫–∏"""
    print("\nüîÑ –ó–∞–ø—É—Å–∫ test_download_note")
    note_page = NotePage(page)
    note_page.open()

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–º–µ—Ç–∫–∞, —á—Ç–æ–±—ã –±—ã–ª–æ —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å
    notes_list = note_page.get_notes()
    assert notes_list, "‚ùå –ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!"

    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É
    first_note_title = notes_list[0]

    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
    download_button = page.locator("#root > div > div > div.Pane.vertical.Pane2 > div > div.Pane.vertical.Pane2 > main > section > nav:nth-child(1) > button:nth-child(4) > span")
    assert download_button.is_visible(), "‚ùå –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    download_button.click()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
    # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–∞–µ—Ç –∫–∞–∫–æ–π-—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏, —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏: {first_note_title}")



@pytest.mark.ui
def test_add_note_to_favorites(page):
    """–¢–µ—Å—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å)"""
    print("\nüîÑ –ó–∞–ø—É—Å–∫ test_add_note_to_favorites")
    note_page = NotePage(page)
    note_page.open()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    note_title = "Favorite Note"
    note_content = "This note should be favorited."
    note_page.add_note(note_title, note_content)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
    notes_list = note_page.get_notes()
    assert any(note_title in note for note in notes_list), "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!"

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫—É
    assert note_page.open_note(note_title), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—Ç–∫—É!"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    assert note_page.add_to_favorites(), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"

@pytest.mark.ui
def test_edit_note(page):
    """–¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ (–Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å)"""
    print("\nüîÑ –ó–∞–ø—É—Å–∫ test_edit_note")
    note_page = NotePage(page)
    note_page.open()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    note_title = "Editable Note"
    note_content = "This is a test note for editing."
    note_page.add_note(note_title, note_content)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
    notes_list = note_page.get_notes()
    assert any(note_title in note for note in notes_list), "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!"

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫—É
    assert note_page.open_note(note_title), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—Ç–∫—É!"

    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_button_selector = "#root > div > div > div.Pane.vertical.Pane2 > div > div.Pane.vertical.Pane2 > main > section > nav:nth-child(1) > button:nth-child(1)"
    edit_button = page.locator(edit_button_selector)
    assert edit_button.is_visible(), "‚ùå –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    edit_button.click()

    # –í–Ω–æ—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–º–µ—Ç–∫—É
    updated_content = "This note has been edited successfully!"
    note_page.page.keyboard.insert_text(updated_content)
    note_page.page.wait_for_timeout(1000)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    note_page.page.click("text=Notes")  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
    note_page.page.wait_for_timeout(2000)

    opened_note = note_page.open_note(note_title)
    assert opened_note, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É!"

import pytest
from pages.note_page import NotePage

@pytest.mark.ui
def test_copy_note_button(page):
    """–¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ 'Copy Note'"""
    print("\nüîÑ –ó–∞–ø—É—Å–∫ test_copy_note_button")
    note_page = NotePage(page)
    note_page.open()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
    note_title = "Copy Note Test"
    note_content = "This note will be copied."
    note_page.add_note(note_title, note_content)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
    notes_list = note_page.get_notes()
    assert any(note_title in note for note in notes_list), "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞!"

    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É 'Copy Note'
    assert note_page.click_copy_note_button(), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É 'Copy Note'!"
